---
import Layout from '../layouts/Layout.astro';
import LabHeader from '../components/LabHeader.astro';
import ServiceCard from '../components/ServiceCard.astro';
import servicesData from '../data/services.json';

const services = servicesData.services || [];

const categories = {};
for (const service of services) {
    if (!categories[service.category]) {
        categories[service.category] = [];
    }
    categories[service.category].push(service);
}
---

<Layout title="Lab Â· Moyuin's Home">
    <div class="container">
        <LabHeader />

        <main id="lab-container">
            {Object.entries(categories).map(([categoryName, services]) => (
                <section class="category-section">
                    <h2 class="category-title" data-i18n={`categories.${categoryName}`}>{categoryName}</h2>
                    <div class="services-grid">
                        {services.map(service => <ServiceCard service={service} />)}
                    </div>
                </section>
            ))}
        </main>
    </div>
</Layout>

<style is:global>
    /* FIX: Override global body styles for a normal scrolling page */
    body {
        height: auto;
        display: block;
        justify-content: initial;
        align-items: initial;
    }

    /* Lab-specific styles */
    .container {
        max-width: 900px;
        margin: 0 auto;
        padding: 20px;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 0;
        border-bottom: 1px solid var(--border, #e5e7eb);
        margin-bottom: 40px;
    }

    .header .title {
        font-size: 1.8rem;
        font-weight: bold;
    }
    
    .header .title a {
        text-decoration: none;
        color: var(--text);
    }

    .header-right {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .links a {
        color: var(--grey);
        margin: 0 10px;
        text-decoration: none;
        font-size: 1.1rem;
        transition: color .2s;
    }

    .links a:hover, .links a.active {
        color: var(--purple);
    }
    
    .controls {
        display: flex;
        align-items: center;
        gap: 10px;
        border-left: 1px solid var(--border, #e5e7eb);
        padding-left: 20px;
        margin-left: 10px;
    }

    .category-section {
        margin-bottom: 40px;
    }

    .category-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 20px;
        border-bottom: 1px solid var(--border, #e5e7eb);
        padding-bottom: 10px;
    }

    .services-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 20px;
    }

    .service-card {
        background: var(--card-bg, #fff);
        border: 1px solid var(--border, #e5e7eb);
        border-radius: 12px;
        padding: 20px;
        transition: transform .2s, box-shadow .2s;
        text-decoration: none;
        color: var(--text);
        display: block;
    }

    .service-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(162, 89, 236, .1);
    }
    
    html.dark .service-card:hover {
        box-shadow: 0 8px 25px rgba(162, 89, 236, .07);
    }

    .card-header {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .card-icon svg {
        width: 28px;
        height: 28px;
        color: var(--icon-color, var(--grey));
        opacity: 0.7;
        transition: opacity .2s, color .2s;
    }

    .service-card:hover .card-icon svg {
        opacity: 1;
        color: var(--purple);
    }

    .card-title {
        font-size: 1.2rem;
        font-weight: 600;
    }

    .card-desc {
        margin-top: 12px;
        font-size: 0.95rem;
        color: var(--grey);
        line-height: 1.6;
    }
    
    .card-footer {
        margin-top: 16px;
        display: flex;
        justify-content: flex-end;
        align-items: center;
    }

    .status-dot {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 8px;
    }

    .status-dot.up { background-color: var(--status-ok, #2ecc71); }
    .status-dot.down { background-color: var(--status-down, #ff6b6b); }
    .status-dot.unknown { background-color: var(--status-unknown, #ccc); }

    .status-text {
        font-size: 0.9rem;
        color: var(--grey);
    }

    @media (max-width: 768px) {
        .header {
            flex-direction: column;
            align-items: flex-start;
            gap: 20px;
        }
        .header-right {
            width: 100%;
            justify-content: space-between;
        }
        .controls {
            margin-left: 0;
            padding-left: 10px;
        }
    }

    /* Define vars for light mode */
    :root {
        --border: #e5e7eb;
        --card-bg: #fff;
        --status-ok: #2ecc71;
        --status-down: #ff6b6b;
        --status-unknown: #ccc;
        --icon-color: var(--grey);
    }

    /* Define vars for dark mode */
    html.dark {
        --border: #2d2d50;
        --card-bg: #1a1a33;
        --icon-color: #b5aed6;
    }
</style>

<script>
import i18next from 'i18next';
import i18nextHttpBackend from 'i18next-http-backend';
import i18nextBrowserLanguageDetector from 'i18next-browser-languagedetector';

const updateUI = () => {
    document.querySelectorAll('[data-i18n]').forEach(el => {
        const key = el.getAttribute('data-i18n');
        if (key) {
            const translatedText = i18next.t(key);
            // Only update if the translation is different to avoid overwriting static content with keys
            if (translatedText !== key) {
                el.textContent = translatedText;
            }
        }
    });
    document.querySelectorAll('[data-i18n-title]').forEach(el => {
        const key = el.getAttribute('data-i18n-title');
        if (key) {
             const translatedText = i18next.t(key);
            if (translatedText !== key) {
                el.setAttribute('title', translatedText);
            }
        }
    });
    document.title = i18next.t('title');
};

i18next
    .use(i18nextHttpBackend)
    .use(i18nextBrowserLanguageDetector)
    .init({
        fallbackLng: 'en',
        load: 'languageOnly',
        debug: false,
        backend: { loadPath: '/locales/{{lng}}.json' }, // Path from public folder
        detection: { caches: ['cookie', 'localStorage'] },
    }, (err, t) => {
        if (err) {
            return console.error('i18next initialization failed:', err);
        }
        // Initial UI update
        updateUI();
        // Add event listener for language changes
        i18next.on('languageChanged', updateUI);
    });

const langBtn = document.getElementById('labLangToggleBtn');
if(langBtn) {
    langBtn.addEventListener('click', () => {
        const newLang = i18next.language.startsWith('zh') ? 'en' : 'zh';
        i18next.changeLanguage(newLang);
    });
}
</script>
